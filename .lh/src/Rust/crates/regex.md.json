{
    "sourceFile": "src/Rust/crates/regex.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1631957756412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1631958013329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,18 @@\n+\n ## Regex\n ### Cargo.toml\n+---\n ```toml\n [dependencies]\n regex = \"0.1.41\"\n ```\n+---\n \n ### match_all\n-```rs\n+---\n\\ No newline at end of file\n+```\n let re = regex::Regex::new(r\"test|regex\")\n \t.expect(\"Regex problem\");\n println!(\"Did test match? {}\", re.is_match(\"test\"))\n-```\n+```\n+---\n\\ No newline at end of file\n"
                },
                {
                    "date": 1631958055105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n ---\n \n ### match_all\n ---\n-```\n+```rust\n let re = regex::Regex::new(r\"test|regex\")\n \t.expect(\"Regex problem\");\n println!(\"Did test match? {}\", re.is_match(\"test\"))\n ```\n"
                },
                {
                    "date": 1631958409824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n \n ### match_all\n ---\n ```rust\n-let re = regex::Regex::new(r\"test|regex\")\n-\t.expect(\"Regex problem\");\n+let re = regex::Regex::new(r\"test|regex\") .expect(\"Regex problem\");\n println!(\"Did test match? {}\", re.is_match(\"test\"))\n ```\n ---\n\\ No newline at end of file\n"
                }
            ],
            "date": 1631957756412,
            "name": "Commit-0",
            "content": "## Regex\n### Cargo.toml\n```toml\n[dependencies]\nregex = \"0.1.41\"\n```\n\n### match_all\n```rs\nlet re = regex::Regex::new(r\"test|regex\")\n\t.expect(\"Regex problem\");\nprintln!(\"Did test match? {}\", re.is_match(\"test\"))\n```"
        }
    ]
}